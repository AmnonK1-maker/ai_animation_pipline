# AI Media Workflow Dashboard - Project Context

## Project Summary
This is a comprehensive Flask-based web application for AI-powered media creation and processing. It provides a complete workflow for generating images, creating animations, and processing videos with advanced features like chroma keying and boomerang automation.

## Core Architecture
- **Flask Web Server** (`app.py`): Handles UI, routes, and job creation on port 5001
- **Background Worker** (`worker.py`): Processes AI jobs asynchronously 
- **SQLite Database** (`jobs.db`): Job queue and status management
- **Two-Terminal Setup**: Flask app + worker must run simultaneously

## Key Technologies
- **Backend**: Flask, SQLite, OpenCV, FFmpeg
- **Frontend**: Vanilla JavaScript, HTML/CSS, Jinja2 templates
- **AI APIs**: Leonardo AI, Replicate (Kling, Seedance), OpenAI, BRIA
- **Video Processing**: FFmpeg for stitching, OpenCV for frame extraction/chroma keying

## Critical Files
- `app.py`: Main Flask application (803 lines) - routes, database, API endpoints
- `worker.py`: Background job processor (625 lines) - AI API calls, job processing
- `video_processor.py`: Video utilities (205 lines) - stitching, chroma keying
- `templates/index.html`: Main UI (1350 lines) - dashboard, job log, interactive features
- `templates/fine_tune.html`: Chroma keying interface
- `templates/animation_step.html`: Animation creation form

## Key Features Implemented
✅ **Multi-model image generation** (Leonardo, OpenAI)
✅ **Animation creation** (Kling v2.1, Seedance-1-Pro) 
✅ **Boomerang automation** (A→B→A loops with consistent backgrounds)
✅ **Video frame extraction** with scrubbing modal
✅ **Advanced chroma keying** with real-time preview
✅ **Optimized video stitching** (CRF 18, fast preset with 5-min timeout)
✅ **Intelligent auto-pause** refresh when viewing job details
✅ **Enhanced batch operations** (multi-select delete, video stitching)
✅ **Visual job log** with thumbnails, action buttons, model names
✅ **Job management tools** (re-stitch, re-key, retry failed jobs)
✅ **Universal job selectability** (all jobs except actively processing)
✅ **Aspect ratio preservation** in video stitching

## Recent Major Fixes (All Working)
- Fixed A-B-A loop automation: consistent background preprocessing for both frames
- Eliminated auto-keying before stitching (now stitches raw videos only)
- Fixed video stitching performance (fast preset instead of veryslow to prevent hanging)
- Enhanced job selectability (all jobs except actively processing have checkboxes)
- Added comprehensive job management: re-stitch, re-key, retry failed jobs
- Fixed worker logic order: keying status takes precedence over job type
- Added /api/reset-job endpoint for restarting jobs
- Implemented aspect ratio preservation in video stitching
- Fixed race conditions in boomerang automation preventing duplicate stitching jobs
- Added visual feedback for boomerang automation child job highlighting
- RESOLVED: Video stitching keying workflow - fixed worker routing bug and UI display
- RESOLVED: Process pending keys functionality - fixed job status transitions
- Added automatic ffmpeg process cleanup to prevent hung processes
- Enhanced UI with job cancellation and bulk cleanup features
- RESOLVED: Style analyzer unlock checkbox - textarea now properly enables/disables for editing
- Added startup script (start_app.sh) with environment validation and automatic setup
- Enhanced debugging with job count logging and console feedback for troubleshooting

## Latest Session Fixes (October 1, 2025) - All Resolved
- **Animation Image Selection**: Fixed error when selecting images from multi-image generation jobs for animation
- **Replicate GPT-4o Integration**: Switched animation idea generation from OpenAI to Replicate's GPT-4o model
- **Enhanced Animation Ideas**: Now uses professional Image-to-Animation Director prompt with detailed analysis
- **UI Improvements**: Fixed "Get Idea" button positioning, added end frame upload option, improved seamless loop layout
- **Path Handling**: Fixed image path construction and URL normalization for better reliability
- **API Response Handling**: Enhanced JavaScript to handle both array and object response formats from /api/jobs
- **Worker Process Management**: Improved worker restart and code update handling

## Analysis Tools Enhancement (October 3, 2025) - All Resolved
- **Style & Palette Analyzer Display**: Fixed job queue to properly show analysis results and input image thumbnails
- **Database Schema Fix**: Corrected `result_data` population - worker now properly stores analysis results instead of image path
- **Direct OpenAI Integration**: Switched from Replicate to OpenAI GPT-4o Vision API for more reliable analysis
- **Enhanced Result UI**: Side-by-side layout with 150px input image and flexible-width analysis result
- **"Use This" Button**: Smart copy/append functionality - style analysis replaces, palette analysis appends to style prompt
- **System Prompt Tracking**: Now captures and displays the actual system prompt used for each analysis job
- **Form Submission Fix**: Added handlers to enable disabled textareas before form submission
- **Flexible Width Layout**: Analysis job cards now use full available width with percentage-based responsive design
- **Status Badge Contrast**: Changed completed badge text to black for better readability
- **Dashboard Layout**: Default split adjusted to 40% tools panel / 60% job queue for optimal workspace
- **Error Handling**: Implemented user-friendly error system with debug mode and detailed logging
- **Database Concurrency**: Enhanced SQLite connection handling with `PRAGMA busy_timeout` for better reliability

## Auto-Keying & Enhanced Keying Workflow (October 4, 2025) - All Working
- **Auto-Key Feature**: One-click automatic chroma keying that reads background color from animation `input_data`
- **Background Detection**: Automatically applies correct HSV settings (hue 60 for green, 100 for blue screens)
- **Pending Process Workflow**: New `pending_process` status allows saving settings without immediate processing
- **Visual Status Indicators**: Purple pause icon (⏸) for pending_process, green "KEYED" badge for completed keying
- **Keyed Video Display**: Thumbnails show keyed version with cache-busting, automatic video playback in expanded view
- **Side-by-Side Comparison**: Expanded job details show original and keyed videos simultaneously with checkered transparency background
- **Download Buttons**: Separate download options for original and keyed video versions
- **Batch Processing**: "Process Pending Jobs" and "Process Selected Keys" with proper job type detection
- **Inline Keying Tool**: Video keyer moved from separate window to integrated left tools panel
- **Color Sampler Tool**: Click-to-sample feature for precise HSV value selection from video frames with RGB→HSV conversion
- **Compact Layout**: Two-column grid for keying sliders with improved spacing and usability
- **Video Playback Fix**: Automatic play/loop enforcement via JavaScript when expanding job details
- **Metadata Storage**: Animation jobs now store `background` field in `input_data` for intelligent auto-keying

## Job Types & Workflow
1. `image_generation`: Create images via AI models
2. `animation`: Convert images to videos
3. `boomerang_automation`: Creates 2 child animations + stitches A→B→A loop
4. `video_stitching`: Combines multiple videos into seamless loops
5. `frame_extraction`: Extract specific frames from videos
6. `background_removal`: Create transparent images via BRIA AI
7. `keying_*`: Various chroma key processing stages

## Common Issues & Solutions
- **Port conflicts**: Flask uses 5001 (not 5000 due to macOS AirPlay)
- **Worker stops**: Check `ps aux | grep python | grep worker`, restart with `python3 worker.py &`
- **Template caching**: Disabled for development, hard refresh browser if needed
- **Stuck jobs**: Check for orphaned ffmpeg processes, kill and restart worker
- **Boomerang issues**: Auto-completion logic ensures child jobs complete properly

## Database Schema (Key Columns)
- `id`: Job identifier
- `job_type`: Type of job (see above)
- `status`: queued → processing → completed/pending_review
- `parent_job_id`: For child jobs (boomerang animations)
- `input_data`: JSON with job parameters
- `result_data`: Path to generated files
- `keyed_result_data`: Path to processed transparent videos

## API Endpoints
- `/api/jobs`: Get job status/history (supports all job types)
- `/api/extract-frame`: Extract video frames with time parameter
- `/api/batch-delete-items`: Delete multiple selected jobs
- `/api/reset-job`: Reset job status for retry/re-processing
- `/api/clear-all-jobs`: Clear all jobs from database
- `/api/clear-failed-jobs`: Clear only failed jobs
- `/api/clear-stuck-jobs`: Clear stuck processing/keying/stitching jobs
- `/api/cancel-job/<job_id>`: Cancel specific job by ID
- `/process-all-pending`: Process pending animations/keying jobs (supports video_stitching and re-keying)
- `/stitch-videos`: Create video stitching jobs (can stitch any two videos)
- `/fine-tune/<job_id>`: Chroma keying interface (works with animations and stitched videos)

## Environment Setup
```bash
# Easy Way (Recommended) - One Command:
./start_app.sh

# Manual Way - Two Terminals:
source venv/bin/activate
flask run --host=0.0.0.0 --port=5001  # Terminal 1: Web server
python3 worker.py                      # Terminal 2: Background processor (optional)

# Access: http://localhost:5001
```

## All Features Working ✅
✅ **Video stitching keying**: RESOLVED - Worker routing bug fixed, stitched jobs now properly create transparent .webm files
✅ **Animation keying**: Works perfectly, creates proper transparent .webm files
✅ **Keying workflow**: Process pending keys functionality completely fixed
✅ **Style analyzer unlock**: RESOLVED - Checkbox now properly enables/disables textarea for editing
✅ **Job visibility**: Debug logging added, startup script ensures proper app launch
✅ **Job selectability**: All jobs (except actively processing) now have checkboxes
✅ **Stitching automation**: Boomerang loops auto-stitch without user intervention
✅ **Performance**: Fast stitching with timeout protection prevents hanging
✅ **Process management**: Automatic cleanup of stuck ffmpeg processes
✅ **UI enhancements**: Job cancellation, bulk cleanup, gallery support for video_stitching
✅ **Startup automation**: One-command startup with environment validation and port handling

## Current Status
✅ Core functionality: Image generation, animations, boomerang automation all working
✅ Enhanced UI: Comprehensive job management with re-stitch, re-key, retry options
✅ Robust processing: Optimized video stitching with aspect ratio preservation
✅ Background automation: A-B-A loops with consistent preprocessing
✅ Error handling: Timeout protection, stuck process detection, worker auto-restart
✅ Complete keying workflow: Both animations and stitched videos support full keying pipeline

**Status**: The application is production-ready with advanced workflow automation. All major features and workflows are fully functional. Latest enhancements (October 4, 2025) include comprehensive auto-keying workflow with intelligent background detection, visual status indicators for pending jobs, side-by-side keyed/original video comparison with download options, inline video keyer with color sampler tool, and automatic video playback/looping in expanded job details. Previous major update (October 3, 2025) included complete overhaul of style/palette analysis tools with GPT-4o Vision integration and smart result display functionality.

# AI Media Workflow Dashboard - Project Context

## Project Summary
This is a comprehensive Flask-based web application for AI-powered media creation and processing. It provides a complete workflow for generating images, creating animations, and processing videos with advanced features like chroma keying and boomerang automation.

## Core Architecture
- **Flask Web Server** (`app.py`): Handles UI, routes, and job creation on port 5001
- **Background Worker** (`worker.py`): Processes AI jobs asynchronously 
- **SQLite Database** (`jobs.db`): Job queue and status management
- **Two-Terminal Setup**: Flask app + worker must run simultaneously

## Key Technologies
- **Backend**: Flask, SQLite, OpenCV, FFmpeg
- **Frontend**: Vanilla JavaScript, HTML/CSS, Jinja2 templates
- **AI APIs**: Leonardo AI, Replicate (Kling, Seedance), OpenAI, BRIA
- **Video Processing**: FFmpeg for stitching, OpenCV for frame extraction/chroma keying

## Critical Files
- `app.py`: Main Flask application - routes, database, API endpoints, analysis integration
- `worker.py`: Background job processor - AI API calls, job processing, analysis completion checks
- `video_processor.py`: Video utilities - stitching, chroma keying with HSV conversion
- `templates/index_v2.html`: **New Modern UI** (2400+ lines) - complete redesign with tool switching, inline actions, smart polling
- `templates/index.html`: Legacy UI (deprecated, kept for reference)
- `templates/fine_tune.html`: Legacy chroma keying interface (deprecated)
- `templates/animation_step.html`: Legacy animation form (deprecated)

## Key Features Implemented
✅ **Multi-model image generation** (Leonardo with style presets, OpenAI with auto-transparency)
✅ **Animation creation** (Kling v2.1, Seedance-1-Pro) with image preview
✅ **Boomerang automation** (A→B→A loops with consistent backgrounds)
✅ **Video frame extraction** with scrubbing modal and extracted frame display
✅ **Advanced chroma keying** with real-time preview, zoom/pan, color sampler
✅ **Optimized video stitching** (CRF 18, fast preset with 5-min timeout)
✅ **Intelligent auto-pause** refresh when viewing job details
✅ **Enhanced batch operations** (multi-select, select all, invert selection, delete, video stitching)
✅ **Visual job log** with thumbnails, processing animations, action buttons, model names
✅ **Job management tools** (re-stitch, re-key, retry failed jobs, priority queue for keying)
✅ **Universal job selectability** (all jobs except actively processing)
✅ **Aspect ratio preservation** in video stitching
✅ **Transparency display** (grid background for keyed videos in thumbnails and modal)
✅ **Art Style Forensics** analyzer with optimized 900-character prompts
✅ **Reference image loading** when editing previous jobs

## Recent Major Fixes (All Working)
- Fixed A-B-A loop automation: consistent background preprocessing for both frames
- Eliminated auto-keying before stitching (now stitches raw videos only)
- Fixed video stitching performance (fast preset instead of veryslow to prevent hanging)
- Enhanced job selectability (all jobs except actively processing have checkboxes)
- Added comprehensive job management: re-stitch, re-key, retry failed jobs
- Fixed worker logic order: keying status takes precedence over job type
- Added /api/reset-job endpoint for restarting jobs
- Implemented aspect ratio preservation in video stitching
- Fixed race conditions in boomerang automation preventing duplicate stitching jobs
- Added visual feedback for boomerang automation child job highlighting
- RESOLVED: Video stitching keying workflow - fixed worker routing bug and UI display
- RESOLVED: Process pending keys functionality - fixed job status transitions
- Added automatic ffmpeg process cleanup to prevent hung processes
- Enhanced UI with job cancellation and bulk cleanup features
- RESOLVED: Style analyzer unlock checkbox - textarea now properly enables/disables for editing
- Added startup script (start_app.sh) with environment validation and automatic setup
- Enhanced debugging with job count logging and console feedback for troubleshooting

## Latest Session Fixes (October 1, 2025) - All Resolved
- **Animation Image Selection**: Fixed error when selecting images from multi-image generation jobs for animation
- **Replicate GPT-4o Integration**: Switched animation idea generation from OpenAI to Replicate's GPT-4o model
- **Enhanced Animation Ideas**: Now uses professional Image-to-Animation Director prompt with detailed analysis
- **UI Improvements**: Fixed "Get Idea" button positioning, added end frame upload option, improved seamless loop layout
- **Path Handling**: Fixed image path construction and URL normalization for better reliability
- **API Response Handling**: Enhanced JavaScript to handle both array and object response formats from /api/jobs
- **Worker Process Management**: Improved worker restart and code update handling

## Analysis Tools Enhancement (October 3, 2025) - All Resolved
- **Style & Palette Analyzer Display**: Fixed job queue to properly show analysis results and input image thumbnails
- **Database Schema Fix**: Corrected `result_data` population - worker now properly stores analysis results instead of image path
- **Direct OpenAI Integration**: Switched from Replicate to OpenAI GPT-4o Vision API for more reliable analysis
- **Enhanced Result UI**: Side-by-side layout with 150px input image and flexible-width analysis result
- **"Use This" Button**: Smart copy/append functionality - style analysis replaces, palette analysis appends to style prompt
- **System Prompt Tracking**: Now captures and displays the actual system prompt used for each analysis job
- **Form Submission Fix**: Added handlers to enable disabled textareas before form submission
- **Flexible Width Layout**: Analysis job cards now use full available width with percentage-based responsive design
- **Status Badge Contrast**: Changed completed badge text to black for better readability
- **Dashboard Layout**: Default split adjusted to 40% tools panel / 60% job queue for optimal workspace
- **Error Handling**: Implemented user-friendly error system with debug mode and detailed logging
- **Database Concurrency**: Enhanced SQLite connection handling with `PRAGMA busy_timeout` for better reliability

## Auto-Keying & Enhanced Keying Workflow (October 4, 2025) - All Working
- **Auto-Key Feature**: One-click automatic chroma keying that reads background color from animation `input_data`
- **Background Detection**: Automatically applies correct HSV settings (hue 60 for green, 100 for blue screens)
- **Pending Process Workflow**: New `pending_process` status allows saving settings without immediate processing
- **Visual Status Indicators**: Purple pause icon (⏸) for pending_process, green "KEYED" badge for completed keying
- **Keyed Video Display**: Thumbnails show keyed version with cache-busting, automatic video playback in expanded view
- **Side-by-Side Comparison**: Expanded job details show original and keyed videos simultaneously with checkered transparency background
- **Download Buttons**: Separate download options for original and keyed video versions
- **Batch Processing**: "Process Pending Jobs" and "Process Selected Keys" with proper job type detection
- **Inline Keying Tool**: Video keyer moved from separate window to integrated left tools panel
- **Color Sampler Tool**: Click-to-sample feature for precise HSV value selection from video frames with RGB→HSV conversion
- **Compact Layout**: Two-column grid for keying sliders with improved spacing and usability
- **Video Playback Fix**: Automatic play/loop enforcement via JavaScript when expanding job details
- **Metadata Storage**: Animation jobs now store `background` field in `input_data` for intelligent auto-keying

## UX Improvements & Workflow Enhancements (October 5, 2025) - All Working
- **Streamlined User Flow**: Removed all confirmation popups for background removal and keying operations
- **Button Readability Fix**: Clear Failed, Clear Stuck, Clear All Jobs buttons now have black text on light background (with `!important` CSS)
- **Smart Status Labels**: `waiting_for_children` displays as "Waiting...", `stitching` as "Stitching..." with shimmer animation
- **ABA Loop Enhancement**: Stitched videos now update parent boomerang_automation job directly instead of creating separate log entry
- **Advanced Color Sampler**: Click-to-sample now inverts saturation/value thresholds (255 - sampled value) for correct keying behavior
- **Bidirectional Erode/Dilate**: Sliders range from -5 to 5 with 0 as default (negative values perform opposite operation)
- **Video Processing Logic**: `process_single_frame()` in `video_processor.py` now handles negative erode/dilate values correctly
- **Preview Endpoint Fix**: `/api/preview-frame` now strips cache-busting parameters before processing video path
- **Uploaded Video Support**: Auto-key and manual keying now fully support user-uploaded videos with background color prompt
- **Palette Analysis AI**: System prompt updated to exclude less prominent blue/green colors (chroma key backgrounds) from subject palette
- **Image Modal Navigation**: Fixed navigation arrows with global function declarations and robust image collection regex
- **Keying Tool UX**: Added Reset Preview, Zoom In/Out (0.5x-4x), Reset Zoom buttons for better frame inspection
- **Checkerboard Background**: Simplified CSS for keying preview container using `repeating-conic-gradient`
- **Non-Intrusive Notifications**: Replaced blocking `alert()` calls with timed toasts (4s success, 6s error) via `showUserFriendlyError()`
- **Job Auto-Expansion Removed**: Jobs no longer auto-expand on creation, keeping log view clean and compact
- **Video Reload Logic**: `openKeyingInterface()` now forces video reload, resets currentTime, and resets zoom on job switch
- **Status Display Fix**: Fixed JavaScript syntax error in `renderSingleJob()` with separate `else if` blocks for waiting/stitching states

## Cloud Deployment Implementation (October 8, 2025) - Production Ready ☁️
- **S3 Storage Integration**: Complete AWS S3 support for cloud media storage (`s3_storage.py`)
- **Railway.app Configuration**: Production deployment setup with `Procfile`, `railway.json`, `nixpacks.toml`
- **Hybrid Storage System**: Seamlessly switches between local files (development) and S3 (production) via `USE_S3` env var
- **Production Server**: Gunicorn WSGI server with 2 workers, 120s timeout for video processing
- **Environment-Based Config**: `PRODUCTION_MODE` flag enables optimized settings for cloud deployment
- **Automatic Worker Deployment**: Railway runs both Flask web server and background worker as separate processes
- **Cloud Dependencies**: Added `boto3` (AWS SDK) and `gunicorn` to `requirements.txt`
- **Complete Documentation**: 
  - `CLOUD_DEPLOYMENT.md`: Step-by-step Railway + S3 setup guide (~40 min deployment time)
  - `env.example`: Template with all required environment variables (API keys + S3 config)
  - Updated `ReadMe.md`: Added cloud deployment section with cost breakdown (~$15/month)
- **Cost-Effective Scaling**: Railway Hobby ($10) + S3 storage ($2-5) for 5-10 concurrent users
- **Centralized Media**: All generated images/videos stored in S3 with public URLs
- **Team Collaboration**: Single deployment accessible by entire team via web browser
- **Zero Installation**: Team members access via URL - no local setup required
- **Always Up-to-Date**: Update code once, entire team gets changes immediately

**Files Modified for Cloud:**
- `app.py`: S3 upload integration for all image/video saves
- `worker.py`: S3 upload for all AI-generated media (animations, images, keyed videos)
- `requirements.txt`: Added production dependencies (gunicorn, boto3)

**New Files for Cloud:**
- `s3_storage.py`: Complete S3 wrapper with upload/download/delete functions
- `Procfile`: Railway process definitions (web + worker)
- `railway.json`: Railway deployment configuration
- `nixpacks.toml`: Build configuration (Python 3.10, ffmpeg, opencv)
- `env.example`: Environment variables template with S3 settings
- `CLOUD_DEPLOYMENT.md`: Complete deployment guide for Railway + S3

## Dependency Fix (October 9, 2025) - Resolved
- **boto3 Installation**: Fixed missing `boto3` dependency that prevented app startup after cloud deployment code merge
- **ModuleNotFoundError**: Resolved import error in `s3_storage.py` by installing boto3 and its dependencies
- **Virtual Environment Update**: Installed `boto3-1.40.47`, `botocore-1.40.47`, `s3transfer-0.14.0` in local venv
- **Startup Restored**: Both Flask app and worker now start successfully with S3 storage module loaded
- **Local Storage Mode**: App runs in development mode with local file storage (S3 disabled by default)
- **Port Conflict Resolution**: Cleaned up duplicate processes on port 5001 before restart
- **Dependencies Installed**: boto3, botocore, s3transfer, jmespath, python-dateutil, six

## Complete UI Overhaul (October 12, 2025) - Production Ready 🎨
- **New Frontend Template**: `index_v2.html` with modern, streamlined design
- **Tool Switching System**: Top toolbar with dedicated buttons for each tool (Image, Animation, Loop Creator, Keyer, Remove Bg)
- **Inline Job Actions**: All actions visible in compact horizontal rows (no expand/collapse)
- **Smart Job Cards**: Context-aware action buttons (Edit, Regenerate, Animate, Key, Stitch, Download)
- **Loop Creator Tool**: Dedicated interface with frame extraction, A→B→A automation, extracted frame preview
- **Background Analysis Integration**: Style/color analysis runs in background, results auto-merge into image prompts
- **Floating Delete Bar**: Batch operations UI with Select All/Invert Selection features
- **Full-Screen Media Viewer**: Navigate images/videos with arrow keys, transparency grid, cache-busting for fresh content
- **Smart Polling System**: Adaptive refresh (2s active, 5s idle, 10s hidden tab)
- **Manual Stitching**: Select two animations, automatic prompt handling
- **Processing Animations**: Visual spinner overlay on job thumbnails during processing
- **Reference Image Previews**: Style and palette images display with dynamic aspect ratio in upload boxes
- **Keyer Improvements**: 
  - Fixed HSV scale conversion (OpenCV 0-180 → Standard 0-360)
  - Visual color preview box with live HSV display
  - Real-time preview with HTML5 Canvas
  - Auto-load video when pressing "Key" button on animation jobs
  - Re-Key functionality to process original video with new settings
  - Zoom & Pan controls (0.5x-4x) with constrained boundaries
  - Grid overlay with customizable size and color
  - Color sampler: click-to-sample HSV values from video
  - Flat dark gray background for professional appearance
  - Hand cursor for panning when zoomed in
- **Keyed Video Display**: Checkerboard thumbnails, "Download Keyed" button
- **Auto-Key Always Available**: Works for all backgrounds, defaults to green screen
- **Multi-Image Generation**: Each image gets immediate job entry
- **Animation Status Fix**: Jobs set to `completed` immediately (no pending_review)
- **Background Job Filtering**: Internal jobs (style_analysis, palette_analysis, video_stitching children) hidden from queue
- **Job Action Enhancements**:
  - **Edit**: Loads job parameters into tool for modification
  - **Regenerate**: One-click regeneration with new seed
  - **Animate**: Sends image to animation tool
  - **Remove Bg**: Sends image to background removal tool
  - **Auto Key**: Immediate keying with intelligent color detection
  - **Key**: Opens manual keyer with video pre-loaded
  - **Stitch**: Add to stitching selection (2 jobs required)
  - **Loop Creator**: Pre-fills video for frame extraction
  - **Download**: Direct file download
  - **Download Keyed**: Download transparent version
  - **Re-Key**: Process original video again with new settings

**Backend Changes:**
- `app.py`: New endpoints `/api/edit-job`, `/api/regenerate-job`, `/manual-key/<job_id>`, `/stitch-videos`
- `app.py`: Image generation route updated to handle style/color reference uploads
- `app.py`: Animation route updated to handle start/end frame uploads
- `app.py`: Auto-key modified to work with all backgrounds
- `worker.py`: Added `check_for_analysis_completion()` to monitor and update waiting image jobs
- `worker.py`: Animation status set to `completed` for immediate action button display
- `worker.py`: Enhanced keying queue handling

**UI/UX Improvements:**
- Shimmer loading animation for "Get Idea" button
- Auto-playing video thumbnails with `autoplay playsinline loop muted`
- Cache-busting for modal video playback
- Model IDs properly connected to UI checkboxes
- Removed all "to be implemented" placeholders
- Fixed animation prompting job visibility (hidden from queue)
- Fixed media viewer modal for both images and videos
- Fixed keyer preview layout (canvas overlay, no slider coverage)
- Added color preview with HSV → HSL conversion for CSS display

**Scale Conversion Fix:**
- Keying preview was comparing mismatched scales (slider 0-180 vs rgbToHsv 0-360)
- Added proper conversion: `hueCenter = sliderValue * 2`
- Fixed saturation/value: `(sliderValue / 255) * 100`
- Hue 60 now correctly keys green (120° standard), not orange

## Job Types & Workflow
1. `image_generation`: Create images via AI models
2. `animation`: Convert images to videos
3. `boomerang_automation`: Creates 2 child animations + stitches A→B→A loop
4. `video_stitching`: Combines multiple videos into seamless loops
5. `frame_extraction`: Extract specific frames from videos
6. `background_removal`: Create transparent images via BRIA AI
7. `keying_*`: Various chroma key processing stages

## Common Issues & Solutions
- **Port conflicts**: Flask uses 5001 (not 5000 due to macOS AirPlay)
- **Worker stops**: Check `ps aux | grep python | grep worker`, restart with `python3 worker.py &`
- **Template caching**: Disabled for development, hard refresh browser if needed
- **Stuck jobs**: Check for orphaned ffmpeg processes, kill and restart worker
- **Boomerang issues**: Auto-completion logic ensures child jobs complete properly

## Database Schema (Key Columns)
- `id`: Job identifier
- `job_type`: Type of job (see above)
- `status`: queued → processing → completed/pending_review
- `parent_job_id`: For child jobs (boomerang animations)
- `input_data`: JSON with job parameters
- `result_data`: Path to generated files
- `keyed_result_data`: Path to processed transparent videos

## API Endpoints
- `/api/jobs`: Get job status/history (supports all job types)
- `/api/extract-frame`: Extract video frames with time parameter
- `/api/batch-delete-items`: Delete multiple selected jobs
- `/api/reset-job`: Reset job status for retry/re-processing
- `/api/clear-all-jobs`: Clear all jobs from database
- `/api/clear-failed-jobs`: Clear only failed jobs
- `/api/clear-stuck-jobs`: Clear stuck processing/keying/stitching jobs
- `/api/cancel-job/<job_id>`: Cancel specific job by ID
- `/process-all-pending`: Process pending animations/keying jobs (supports video_stitching and re-keying)
- `/stitch-videos`: Create video stitching jobs (can stitch any two videos)
- `/fine-tune/<job_id>`: Chroma keying interface (works with animations and stitched videos)

## Environment Setup
```bash
# Easy Way (Recommended) - One Command:
./start_app.sh

# Manual Way - Two Terminals:
source venv/bin/activate
flask run --host=0.0.0.0 --port=5001  # Terminal 1: Web server
python3 worker.py                      # Terminal 2: Background processor (optional)

# Access: http://localhost:5001
```

## All Features Working ✅
✅ **Video stitching keying**: RESOLVED - Worker routing bug fixed, stitched jobs now properly create transparent .webm files
✅ **Animation keying**: Works perfectly, creates proper transparent .webm files
✅ **Keying workflow**: Process pending keys functionality completely fixed
✅ **Style analyzer unlock**: RESOLVED - Checkbox now properly enables/disables textarea for editing
✅ **Job visibility**: Debug logging added, startup script ensures proper app launch
✅ **Job selectability**: All jobs (except actively processing) now have checkboxes
✅ **Stitching automation**: Boomerang loops auto-stitch without user intervention
✅ **Performance**: Fast stitching with timeout protection prevents hanging
✅ **Process management**: Automatic cleanup of stuck ffmpeg processes
✅ **UI enhancements**: Job cancellation, bulk cleanup, gallery support for video_stitching
✅ **Startup automation**: One-command startup with environment validation and port handling

## Current Status
✅ Core functionality: Image generation, animations, boomerang automation all working
✅ Enhanced UI: Comprehensive job management with re-stitch, re-key, retry options
✅ Robust processing: Optimized video stitching with aspect ratio preservation
✅ Background automation: A-B-A loops with consistent preprocessing
✅ Error handling: Timeout protection, stuck process detection, worker auto-restart
✅ Complete keying workflow: Both animations and stitched videos support full keying pipeline

## Enhanced UI/UX & Video Keying Tools (October 13, 2025) - All Working 🎨
- **Processing Animations**: Added spinner overlay to job thumbnails for visual feedback during `queued`, `processing`, `keying_queued`, `keying_processing`, `waiting_for_children`, `stitching`, `waiting_for_analysis` states
- **Reference Image Display**: Style and palette analysis images now display directly in upload boxes with dynamic aspect ratio (flex layout, height auto)
- **Art Style Forensics Analyzer**: Updated system prompt to structured format with Drawing/Photography/3D branches, limited to 900 characters for Leonardo model compatibility
- **Extracted Frame Preview**: Frames A and B display in Loop Creator tool below video using object URLs from canvas-captured blobs
- **Keying Job Priority**: Auto-key and manual-key jobs update `created_at` timestamp to jump to top of queue for immediate processing
- **Universal Keying**: Key/Auto Key buttons added to `video_stitching` and `video_upload` job types alongside animations
- **ABA Thumbnail Cache-Busting**: Video thumbnails append `?t=${Date.now()}` to force refresh after keying operations
- **Video Keyer Auto-Replace**: Calls `resetPreview()` and `resetKeyerZoom()` when loading new video to clear previous state
- **Zoom & Pan Controls**: 
  - Zoom In/Out buttons (0.5x to 4x range)
  - Reset Zoom button
  - Constrained panning calculations to keep video within frame boundaries
  - Hand cursor for panning when zoomed in
  - `mousemove` event tracking for dragging functionality
- **Grid Overlay**: Grid Size (select) and Grid Color (color input) controls for alignment assistance
- **Color Sampler Tool**: 
  - Click-to-sample button toggles crosshair cursor
  - Click on video captures pixel RGB, converts to HSV
  - Automatically updates keying sliders with sampled values
  - `rgbToHsv()` helper function for color conversion
- **Animation Tool Image Preview**: Start frame image displays in upload box before generation (matches style analyzer UX)
- **Batch Selection Tools**: "Select All" and "Invert Selection" buttons added to floating delete bar
- **Transparency Display**: 
  - Modal images with `.has-transparency` class show checkerboard background
  - Keyed videos in modal get transparency grid via `job.keyed_result_data` detection
  - Checkerboard pattern: `linear-gradient` with 20px tiles
- **Edit Job Enhancement**: 
  - `/api/edit-job` endpoint fetches `style_ref_image_path` and `color_ref_image_path` from parent analysis jobs
  - JavaScript `editJob()` function loads reference images into preview `<img>` tags
  - Fixed element ID references: `style-ref-preview-img` and `color-ref-preview-img`
- **Leonardo Style Presets**: Dropdown menu `<select id="img-preset-style">` with various style options (cinematic, anime, photorealistic, etc.)
- **ChatGPT Transparency**: `handle_replicate_openai_generation()` in worker.py appends ", on a transparent background" to all prompts
- **Keying Tool UX**: Background changed from black to flat dark gray (`#2a2a2a`) for professional appearance
- **Media Viewer Grid**: Keyed videos display with checkerboard background via `.has-transparency` class in modal
- **Zoom Constraint Fix**: Improved `applyKeyerZoom()` to properly calculate `maxPanX/Y` based on scaled dimensions and constrain within boundaries

## Critical Bug Fixes & Stability Improvements (October 5, 2025) - All Resolved
|- **Frame Extraction ID Issue**: Fixed SQLite ID manipulation bug by using future timestamps instead of manual ID assignment
|- **Animation File Handle Leak**: Added try-finally blocks to ensure `end_file_obj` is properly closed in all error paths
|- **Boomerang Race Condition**: Refined child job completion logic to check for `status=='completed'` and `result_data` explicitly
|- **Database Lock Prevention**: Added error handling to all Flask route database operations to prevent unhandled exceptions
|- **FFmpeg Zombie Processes**: Implemented explicit process.kill() in timeout handlers to prevent hung FFmpeg processes
|- **Frontend Syntax Errors**: Fixed 3 JavaScript syntax errors (misplaced braces in deleteGroup, animateGroupImages, removeBgGroup)
|- **Worker Cleanup**: Eliminated 18 duplicate worker processes that were consuming resources
|- **Database Integrity**: Updated stuck boomerang automation job to prevent frontend loading issues

**Status**: The application has undergone a complete UI transformation and is production-ready with modern, streamlined workflows. 

**Latest Update (October 13, 2025)**: Enhanced UI/UX and video keying tools with processing animations, reference image previews, Art Style Forensics analyzer (900 char limit), extracted frame display, keying job priority queue, universal keying support for all video types, cache-busting for thumbnails, advanced video keyer (zoom/pan/grid/color sampler), batch selection tools, transparency display, edit job enhancements, Leonardo style presets, ChatGPT transparency support, zoom constraint fixes, and keying tool UX improvements.

**Previous Updates**: October 12, 2025 (complete UI overhaul), October 5, 2025 PM (critical stability fixes), October 5, 2025 AM (UX improvements), October 4, 2025 (auto-keying workflow), October 3, 2025 (GPT-4o Vision integration), October 8-9, 2025 (cloud deployment + S3 integration).
